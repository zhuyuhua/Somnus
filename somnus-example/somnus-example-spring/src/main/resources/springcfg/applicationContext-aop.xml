<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd "
	default-lazy-init="true">
	
<!-- 	
	切面(aspect)：			用来切插业务方法的类。
　　连接点(joinpoint)：		是切面类和业务类的连接点，其实就是封装了业务方法的一些基本属性，作为通知的参数来解析。
　　通知(advice)：			在切面类中，声明对业务方法做额外处理的方法。
　　切入点(pointcut)：		业务类中指定的方法，作为切面切入的点。其实就是指定某个方法作为切面切的地方。
　　目标对象(target object)：被代理对象。
　　AOP代理(aop proxy)：		代理对象。
　　
	通知：
　　前置通知(before advice)：在切入点之前执行。
　　后置通知(after returning advice)：在切入点执行完成后，执行通知。
　　环绕通知(around advice)：包围切入点，调用方法前后完成自定义行为。
　　异常通知(after throwing advice)：在切入点抛出异常后，执行通知。
 -->

	<!-- ==============================方式一：AOP接口================================ -->
	<!-- ==============================利用spring自己的aop配置======================== -->
	<!-- 业务类 -->
	<bean id="baseBusiness" class="com.zhuyuhua.myspring.aop.business.BaseBusiness"/>
	
	<!-- 声明通知类 -->
	<bean id="baseBeforeAdvice" class="com.zhuyuhua.myspring.aop.advice.BaseBeforeAdvice"/>
	<bean id="baseAfterReturnAdvice" class="com.zhuyuhua.myspring.aop.advice.BaseAfterReturnAdvice"/>
	<bean id="baseAfterThrowsAdvice" class="com.zhuyuhua.myspring.aop.advice.BaseAfterThrowsAdvice"/>
	<bean id="baseAroundAdvice" class="com.zhuyuhua.myspring.aop.advice.BaseAroundAdvice"/>
	
	<!-- 指定切点匹配类 -->
	<bean id="pointcut" class="com.zhuyuhua.myspring.aop.pointcut.Pointcut" />
	
	<!-- 包装通知，指定切点 -->
	<bean id="matchBeforeAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut" ref="pointcut" />
		<property name="advice" ref="baseBeforeAdvice" />
	</bean>
	
	<!-- 使用ProxyFactoryBean 产生代理对象 -->
	<bean id="businessProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
	
		<!-- 代理对象所实现的接口，如果有接口可以这样设置 -->
		<property name="proxyInterfaces" value="com.zhuyuhua.myspring.aop.business.IBaseBusiness" />
		
		<!-- 设置目标对象 -->
		<property name="target" ref="baseBusiness" />
		
		<!-- 代理对象所使用的拦截器 -->
		<property name="interceptorNames">
			<list>
<!-- 				<value>matchBeforeAdvisor</value> -->
<!-- 				<value>baseAfterReturnAdvice</value> -->
<!-- 				<value>baseBeforeAdvice</value> -->
<!-- 				<value>baseAroundAdvice</value> -->
<!-- 				<value>baseAfterThrowsAdvice</value> -->
			</list>
		</property>
	</bean>
	
	
	<!-- **************************************方式二：schema配置****************************************************** -->
	<!-- ==============================利用spring 利用aspectj来配置AOP================================ -->

    <!-- 声明一个业务类 -->
    <bean id="aspectBusiness" class="com.zhuyuhua.myspring.aop.business.aspect.AspectBusiness" />

    <!-- 声明通知类 -->
    <bean id="aspectAdvice" class="com.zhuyuhua.myspring.aop.advice.aspect.AspectAdvice" />

    <aop:config>
        <aop:aspect id="businessAspect" ref="aspectAdvice">
            <!-- 配置指定切入的对象 -->
            <aop:pointcut id="point_cut" expression="execution(* com.zhuyuhua.myspring.aop.business.aspect.AspectBusiness.*(..))" />
            
            <!-- 只匹配add方法作为切入点
            <aop:pointcut id="except_add" expression="execution(* aop.schema.*.add(..))" />
             -->

            <!-- 前置通知 -->
            <aop:before method="doBefore" pointcut-ref="point_cut" />
            
            <!-- 后置通知 returning指定返回参数 -->
            <aop:after-returning method="doAfter" pointcut-ref="point_cut" returning="result" />
            <aop:around method="doAround" pointcut-ref="point_cut"/>
            <aop:after-throwing method="doThrow" pointcut-ref="point_cut" throwing="e"/>
        </aop:aspect>
        
    </aop:config>
    
    <!-- **************************************方式三：aspectj注解****************************************************** -->
    <!-- 打开aop 注解 -->
    <aop:aspectj-autoproxy />
    <context:component-scan base-package="com.zhuyuhua.myspring.aop.business.annotation" />
    <context:component-scan base-package="com.zhuyuhua.myspring.aop.advice.annotation" />
	
	
	
</beans>