apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

apply from: '../../libraries.gradle'

group = 'com.somnus.example.web'
version = '1.0-SNAPSHOT'


war {
	baseName =  'somnus-web'
}


dependencies {
	
	testCompile libraries.junit

	compile libraries.commons_fileupload
	compile libraries.commons_io
	compile libraries.commons_pool
	compile libraries.commons_dbcp
	compile libraries.commons_collections
	compile libraries.commons_beanutils
	
	// spring
	compile libraries.spring_aop
	compile libraries.spring_aspects
	compile libraries.spring_context
	compile libraries.spring_context_support
	compile libraries.spring_jdbc
	compile libraries.spring_orm
	compile libraries.spring_test
	compile libraries.spring_webmvc
	compile libraries.spring_web
	compile libraries.spring_tx
	
	compile libraries.hibernate_core
	compile libraries.jstl
	compile libraries.mysql_connector
	compile libraries.javax_persistence
	
	compile libraries.servlet_api
	
	compile libraries.slf4j_log
	compile libraries.slf4j_api
	
	compile libraries.log4j_api
	compile libraries.log4j_core
	
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
    maven { url 'http://localhost:8082/nexus/content/groups/public' }
    mavenCentral()
}

eclipse {
    classpath {
        downloadSources=true
    }
}


sourceSets{
	main{
		java{
			srcDir 'src/main/java'
		}
		resources{
			srcDir 'src/main/resources'
		}
	}
	test{
		java{
			srcDir 'src/main/java'
		}
		resources{
			srcDir 'src/main/resources'
		}
	}
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }


task listJars << {
	configurations.compile.each { File file -> println file.name }
}

task zip(type: Zip) {
    from ('script') { into('bin') }
    from ('src/main/resources') { into('conf') }
    if (project.hasProperty('profile'))
        from ('src/main/resources-' + project.profile) { into('conf') }
    into('lib') {
        from ('lib')
        from (jar.outputs.files)
        from (configurations.compile)
    }
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// 编译groovy代码时采用 MacRoman
tasks.withType(GroovyCompile) {
    groovyOptions.encoding = 'MacRoman'
}

// 编译JAVADOC文件时采用 UTF-8
tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

// 编译JAVA文件时采用 UTF-8
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }



[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
